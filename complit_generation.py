from dataclasses import dataclass


class UsemBase:
    """Represents the minimum data for a usem"""

    def __init__(self, usem, definition):
        """Usem minimum data

        Parameters:
            usem (str): identifier
            definition (str): definition of the usem
        """
        self.usem = usem
        self.definition:str|None = definition
    

    def to_dict(self) -> dict[str, any]:
        """Returns a dictionary version of the object

        Returns:
            dictionary (dict[str, any]): dictionary version of the object
        """
        return {'usem': self.usem, 'definition': self.definition}


class Relation(UsemBase):
    """Represents a relation with another usem"""

    def __init__(self, usem, lemma, definition, type, example):
        """Initialize a relation with another usem

        Parameters:
            usem (str): identifier of the related usem
            lemma (str): lemma to which the related usem belongs
            definition (str): definition of the related usem
            type (str): relation type (es. hyponym)
        """
        super().__init__(usem, definition)
        self.lemma = lemma
        self.type = type
        self.example = example

    
    def to_dict(self) -> dict[str, any]:
        """Returns a dictionary version of the object

        Returns:
            dictionary (dict[str, any]): dictionary version of the object
        """
        return {'usem': self.usem, 'lemma': self.lemma, 'definition': self.definition, 'type': self.type, 'example': self.example}


@dataclass
class Score:
    """Represents the score given by a LLM as a judge"""
    model: str
    """judge model name"""
    score: int
    """score given to a definition"""


    def to_dict(self) -> dict[str, any]:
        """Returns a dictionary version of the object

        Returns:
            dictionary (dict[str, any]): dictionary version of the object
        """
        return {'model': self.model, 'score': self.score}


@dataclass
class AIDefinition:
    """Represents the definition generated by an LLM"""
    model: str
    """model name of the LLM used for generation"""
    definition: str
    """definition of a usem generated by the model"""
    scores: list[Score]
    """list of evaluation scores given by LLMs used as judges"""
    mean_score: float #mean score. -1 means discarted

    def to_dict(self) -> dict[str, any]:
        """Returns a dictionary version of the object

        Returns:
            dictionary (dict[str, any]): dictionary version of the object
        """
        return {'model': self.model, 'definition': self.definition, 'scores': [score.to_dict() for score in self.scores]}

@dataclass
class UsemEntry(UsemBase):
    """Represents a usem for the elaboration"""

    chosenAiDef = "" 
    chosenAiDefScore = 0.0
    chosenAiDefModelGenerator = ""
    
    def __init__(self, usem, definition, template, example, relations,  ai_definitions, chosen_definition=None, chosen_score=None, chosen_model=None):
        """Initialize a UsemEntry

        Parameters:
            usem (str): identifier
            definition (str): definition of the usem
            template (str): template associated with the usem
            example (str): example of usage of the usem
            relations (list[Relation]): list of relations with other usems
            ai_definitions (list[AIDefinition]): list of definitions and evaluations generated by LLMs
        """
        super().__init__(usem, definition)
        self.template = template
        self.example = example
        self.relations = relations
        self.ai_definitions:list[AIDefinition] = ai_definitions
        self.chosenAiDef = chosen_definition 
        self.chosenAiDefScore = chosen_score
        self.chosenAiDefModelGenerator = chosen_model

    def to_dict(self) -> dict[str, any]:
        """Returns a dictionary version of the object

        Returns:
            dictionary (dict[str, any]): dictionary version of the object
        """
        return {'usem': self.usem, 'definition': self.definition, 'template': self.template, 'example': self.example, 
                'relations': [relation.to_dict() for relation in self.relations], 'ai_definitions': [ai_def.to_dict() for ai_def in self.ai_definitions],
                'chosen_ai_definition':self.chosenAiDef, 'chosen_mean_ai_score':self.chosenAiDefScore, 'chosen_ai_model':self.chosenAiDefModelGenerator}


class LexicalEntry:

    def __init__(self, lemma, lemma_id, senses):
        self.lemma:str = lemma
        self.lemma_id:str = lemma_id
        self.senses:list[UsemEntry] = senses


    def to_dict(self) -> dict[str, any]:
        """Returns a dictionary version of the object

        Returns:
            dictionary (dict[str, any]): dictionary version of the object
        """
        return {'lemma': self.lemma, 'lemma_id': self.lemma_id, 'senses': [sense.to_dict() for sense in self.senses]}